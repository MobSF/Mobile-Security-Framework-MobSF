# -*- coding: utf_8 -*-
# Module for Malware Analysis
import io
import logging
import os
import re
from socket import (
    gaierror,
    gethostbyname,
)
from urllib.parse import urlparse

from django.conf import settings

import IP2Location

from MobSF.utils import (
    is_internet_available,
    update_local_db,
)

logger = logging.getLogger(__name__)
MALWARE_DB_DIR = settings.SIGNATURE_DIR
IP2LocObj = IP2Location.IP2Location()


def update_malware_db():
    """Check for update in malware DB."""
    try:
        mal_db = os.path.join(MALWARE_DB_DIR, 'malwaredomainlist')
        resp = update_local_db('Malware', settings.MALWARE_DB_URL, mal_db)
        if (resp):
            # DB needs update
            # Check2: DB Syntax Changed
            line = resp.decode('utf-8', 'ignore').split('\n')[0]
            lst = line.split('",')
            if len(lst) == 10:
                # DB Format is not changed. Let's update DB
                logger.info('Updating Malware Database....')
                with open(mal_db, 'wb') as wfp:
                    wfp.write(resp)
            else:
                logger.info('Malware Database format from '
                            'malwaredomainlist.com has changed.'
                            ' Database is not updated. '
                            'Please report to: https://github.com/'
                            'MobSF/Mobile-Security-Framework-MobSF/issues')
    except Exception:
        logger.exception('[ERROR] Malware DB Update')


def malware_check(urllist):
    result = {}
    try:
        if not settings.DOMAIN_MALWARE_SCAN:
            logger.info('Domain Malware Check disabled in settings')
            return result
        if is_internet_available():
            update_malware_db()
        else:
            logger.warning('No Internet Connection. '
                           'Skipping Malware Database Update.')
        domainlist = get_domains(urllist)
        if not domainlist:
            return result
        mal_db = os.path.join(MALWARE_DB_DIR, 'malwaredomainlist')
        with io.open(mal_db,
                     mode='r',
                     encoding='utf8',
                     errors='ignore') as flip:
            entry_list = flip.readlines()
        for entry in entry_list:
            enlist = entry.split('","')
            if len(enlist) > 5:
                details_dict = {}
                details_dict['domain_or_url'] = enlist[1]
                details_dict['ip'] = enlist[2]
                details_dict['desc'] = enlist[4]
                details_dict['bad'] = 'yes'
                dmn_url = details_dict['domain_or_url']
                for domain in domainlist:
                    dmn_neturl = get_netloc(dmn_url)
                    if (((dmn_neturl == domain or dmn_neturl == domain[4:])
                            and (len(dmn_url) > 1))
                            or details_dict['ip'].startswith(domain)):
                        result[domain] = details_dict
        offline_db = os.path.join(settings.BASE_DIR,
                                  'signatures',
                                  'IP2LOCATION-LITE-DB5.IPV6.BIN')
        IP2LocObj.open(offline_db)
        for domain in domainlist:
            # Good Domains
            if domain not in result:
                tmp_d = {}
                tmp_d['bad'] = 'no'
                result[domain] = tmp_d
            # GeoIP
            ip = None
            try:
                ip = gethostbyname(domain)
            except (gaierror, UnicodeError):
                pass
            if ip:
                rec = IP2LocObj.get_all(ip)
                result[domain]['geolocation'] = rec.__dict__
            else:
                result[domain]['geolocation'] = None
        IP2LocObj.close()
    except Exception:
        logger.exception('[ERROR] Performing Malware Check')
    return result

# Helper Functions


def verify_domain(checkeddom):
    try:
        if (len(checkeddom) > 2
                and '.' in checkeddom
                and (checkeddom.endswith('.') is False
                     and re.search('[a-zA-Z0-9]', checkeddom))):
            return True
        else:
            return False
    except Exception:
        logger.exception('[ERROR] Verifying Domain')


def get_netloc(url):
    """Get Domain."""
    try:
        domain = ''
        parse_uri = urlparse(url)
        if not parse_uri.scheme:
            url = '//' + url
            parse_uri = urlparse(url)
        domain = '{uri.netloc}'.format(uri=parse_uri)
        if verify_domain(domain):
            return domain
    except Exception:
        logger.exception('[ERROR] Extracting Domain form URL')


def sanitize_domain(domain):
    """Sanitize domain to be RFC1034 compliant."""
    domain = domain.split('_')[0]
    domain = re.sub(r'[^\w^\.^\-]', '', domain)
    if domain.startswith('-'):
        domain = sanitize_domain(domain[1:])
    elif domain.endswith('-'):
        domain = sanitize_domain(domain[:-1])
    return domain


def get_domains(urls):
    """Get Domains."""
    try:
        domains = []
        for url in urls:
            parse_uri = urlparse(url)
            if not parse_uri.scheme:
                url = '//' + url
                parse_uri = urlparse(url)
            domain = sanitize_domain(
                '{uri.hostname}'.format(uri=parse_uri))
            if (domain not in domains
                    and verify_domain(domain)):
                domains.append(domain)
        return domains
    except Exception:
        logger.exception('[ERROR] Extracting Domain form URL')
